<?php
/**
 * DsParcelDeliveryResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  ProfileService\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ProfileService-TEST
 *
 * Profile service
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ProfileService\Client\Model;

use \ArrayAccess;
use \ProfileService\Client\ObjectSerializer;

/**
 * DsParcelDeliveryResponse Class Doc Comment
 *
 * @category Class
 * @package  ProfileService\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsParcelDeliveryResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ParcelDeliveryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_shipped' => 'string[]',
        'name' => 'string',
        'source_partner_acronym' => 'string',
        'amount' => 'double',
        'amount_chf' => 'double',
        'tax_chf' => 'double',
        'tax_rate' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item_shipped' => null,
        'name' => null,
        'source_partner_acronym' => null,
        'amount' => 'double',
        'amount_chf' => 'double',
        'tax_chf' => 'double',
        'tax_rate' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_shipped' => 'itemShipped',
        'name' => 'name',
        'source_partner_acronym' => 'sourcePartnerAcronym',
        'amount' => 'amount',
        'amount_chf' => 'amountCHF',
        'tax_chf' => 'taxCHF',
        'tax_rate' => 'taxRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_shipped' => 'setItemShipped',
        'name' => 'setName',
        'source_partner_acronym' => 'setSourcePartnerAcronym',
        'amount' => 'setAmount',
        'amount_chf' => 'setAmountChf',
        'tax_chf' => 'setTaxChf',
        'tax_rate' => 'setTaxRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_shipped' => 'getItemShipped',
        'name' => 'getName',
        'source_partner_acronym' => 'getSourcePartnerAcronym',
        'amount' => 'getAmount',
        'amount_chf' => 'getAmountChf',
        'tax_chf' => 'getTaxChf',
        'tax_rate' => 'getTaxRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_shipped'] = isset($data['item_shipped']) ? $data['item_shipped'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['source_partner_acronym'] = isset($data['source_partner_acronym']) ? $data['source_partner_acronym'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_chf'] = isset($data['amount_chf']) ? $data['amount_chf'] : null;
        $this->container['tax_chf'] = isset($data['tax_chf']) ? $data['tax_chf'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_shipped
     *
     * @return string[]
     */
    public function getItemShipped()
    {
        return $this->container['item_shipped'];
    }

    /**
     * Sets item_shipped
     *
     * @param string[] $item_shipped item_shipped
     *
     * @return $this
     */
    public function setItemShipped($item_shipped)
    {
        $this->container['item_shipped'] = $item_shipped;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets source_partner_acronym
     *
     * @return string
     */
    public function getSourcePartnerAcronym()
    {
        return $this->container['source_partner_acronym'];
    }

    /**
     * Sets source_partner_acronym
     *
     * @param string $source_partner_acronym source_partner_acronym
     *
     * @return $this
     */
    public function setSourcePartnerAcronym($source_partner_acronym)
    {
        $this->container['source_partner_acronym'] = $source_partner_acronym;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_chf
     *
     * @return double
     */
    public function getAmountChf()
    {
        return $this->container['amount_chf'];
    }

    /**
     * Sets amount_chf
     *
     * @param double $amount_chf amount_chf
     *
     * @return $this
     */
    public function setAmountChf($amount_chf)
    {
        $this->container['amount_chf'] = $amount_chf;

        return $this;
    }

    /**
     * Gets tax_chf
     *
     * @return double
     */
    public function getTaxChf()
    {
        return $this->container['tax_chf'];
    }

    /**
     * Sets tax_chf
     *
     * @param double $tax_chf tax_chf
     *
     * @return $this
     */
    public function setTaxChf($tax_chf)
    {
        $this->container['tax_chf'] = $tax_chf;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return double
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param double $tax_rate tax_rate
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
