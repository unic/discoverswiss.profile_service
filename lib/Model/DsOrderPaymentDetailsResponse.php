<?php
/**
 * DsOrderPaymentDetailsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  ProfileService\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ProfileService-TEST
 *
 * Profile service
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ProfileService\Client\Model;

use \ArrayAccess;
use \ProfileService\Client\ObjectSerializer;

/**
 * DsOrderPaymentDetailsResponse Class Doc Comment
 *
 * @category Class
 * @package  ProfileService\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsOrderPaymentDetailsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderPaymentDetailsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'payment_type' => 'string',
        'session_id' => 'string',
        'payment_intent_id' => 'string',
        'reference' => 'string',
        'order_item_reference' => 'string',
        'order_payment_status' => 'string',
        'wallet_type' => 'string',
        'payment_provider' => 'string',
        'amount_currency' => 'double',
        'currency' => 'string',
        'description' => 'string',
        'available_balance' => 'double',
        'hide_amount' => 'bool',
        'restrictions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'payment_type' => null,
        'session_id' => null,
        'payment_intent_id' => null,
        'reference' => null,
        'order_item_reference' => null,
        'order_payment_status' => null,
        'wallet_type' => null,
        'payment_provider' => null,
        'amount_currency' => 'double',
        'currency' => null,
        'description' => null,
        'available_balance' => 'double',
        'hide_amount' => null,
        'restrictions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'payment_type' => 'paymentType',
        'session_id' => 'sessionId',
        'payment_intent_id' => 'paymentIntentId',
        'reference' => 'reference',
        'order_item_reference' => 'orderItemReference',
        'order_payment_status' => 'orderPaymentStatus',
        'wallet_type' => 'walletType',
        'payment_provider' => 'paymentProvider',
        'amount_currency' => 'amountCurrency',
        'currency' => 'currency',
        'description' => 'description',
        'available_balance' => 'availableBalance',
        'hide_amount' => 'hideAmount',
        'restrictions' => 'restrictions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'payment_type' => 'setPaymentType',
        'session_id' => 'setSessionId',
        'payment_intent_id' => 'setPaymentIntentId',
        'reference' => 'setReference',
        'order_item_reference' => 'setOrderItemReference',
        'order_payment_status' => 'setOrderPaymentStatus',
        'wallet_type' => 'setWalletType',
        'payment_provider' => 'setPaymentProvider',
        'amount_currency' => 'setAmountCurrency',
        'currency' => 'setCurrency',
        'description' => 'setDescription',
        'available_balance' => 'setAvailableBalance',
        'hide_amount' => 'setHideAmount',
        'restrictions' => 'setRestrictions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'payment_type' => 'getPaymentType',
        'session_id' => 'getSessionId',
        'payment_intent_id' => 'getPaymentIntentId',
        'reference' => 'getReference',
        'order_item_reference' => 'getOrderItemReference',
        'order_payment_status' => 'getOrderPaymentStatus',
        'wallet_type' => 'getWalletType',
        'payment_provider' => 'getPaymentProvider',
        'amount_currency' => 'getAmountCurrency',
        'currency' => 'getCurrency',
        'description' => 'getDescription',
        'available_balance' => 'getAvailableBalance',
        'hide_amount' => 'getHideAmount',
        'restrictions' => 'getRestrictions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['payment_intent_id'] = isset($data['payment_intent_id']) ? $data['payment_intent_id'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['order_item_reference'] = isset($data['order_item_reference']) ? $data['order_item_reference'] : null;
        $this->container['order_payment_status'] = isset($data['order_payment_status']) ? $data['order_payment_status'] : null;
        $this->container['wallet_type'] = isset($data['wallet_type']) ? $data['wallet_type'] : null;
        $this->container['payment_provider'] = isset($data['payment_provider']) ? $data['payment_provider'] : null;
        $this->container['amount_currency'] = isset($data['amount_currency']) ? $data['amount_currency'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['available_balance'] = isset($data['available_balance']) ? $data['available_balance'] : null;
        $this->container['hide_amount'] = isset($data['hide_amount']) ? $data['hide_amount'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type payment_type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id session_id
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets payment_intent_id
     *
     * @return string
     */
    public function getPaymentIntentId()
    {
        return $this->container['payment_intent_id'];
    }

    /**
     * Sets payment_intent_id
     *
     * @param string $payment_intent_id payment_intent_id
     *
     * @return $this
     */
    public function setPaymentIntentId($payment_intent_id)
    {
        $this->container['payment_intent_id'] = $payment_intent_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets order_item_reference
     *
     * @return string
     */
    public function getOrderItemReference()
    {
        return $this->container['order_item_reference'];
    }

    /**
     * Sets order_item_reference
     *
     * @param string $order_item_reference order_item_reference
     *
     * @return $this
     */
    public function setOrderItemReference($order_item_reference)
    {
        $this->container['order_item_reference'] = $order_item_reference;

        return $this;
    }

    /**
     * Gets order_payment_status
     *
     * @return string
     */
    public function getOrderPaymentStatus()
    {
        return $this->container['order_payment_status'];
    }

    /**
     * Sets order_payment_status
     *
     * @param string $order_payment_status order_payment_status
     *
     * @return $this
     */
    public function setOrderPaymentStatus($order_payment_status)
    {
        $this->container['order_payment_status'] = $order_payment_status;

        return $this;
    }

    /**
     * Gets wallet_type
     *
     * @return string
     */
    public function getWalletType()
    {
        return $this->container['wallet_type'];
    }

    /**
     * Sets wallet_type
     *
     * @param string $wallet_type wallet_type
     *
     * @return $this
     */
    public function setWalletType($wallet_type)
    {
        $this->container['wallet_type'] = $wallet_type;

        return $this;
    }

    /**
     * Gets payment_provider
     *
     * @return string
     */
    public function getPaymentProvider()
    {
        return $this->container['payment_provider'];
    }

    /**
     * Sets payment_provider
     *
     * @param string $payment_provider payment_provider
     *
     * @return $this
     */
    public function setPaymentProvider($payment_provider)
    {
        $this->container['payment_provider'] = $payment_provider;

        return $this;
    }

    /**
     * Gets amount_currency
     *
     * @return double
     */
    public function getAmountCurrency()
    {
        return $this->container['amount_currency'];
    }

    /**
     * Sets amount_currency
     *
     * @param double $amount_currency amount_currency
     *
     * @return $this
     */
    public function setAmountCurrency($amount_currency)
    {
        $this->container['amount_currency'] = $amount_currency;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return double
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param double $available_balance available_balance
     *
     * @return $this
     */
    public function setAvailableBalance($available_balance)
    {
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets hide_amount
     *
     * @return bool
     */
    public function getHideAmount()
    {
        return $this->container['hide_amount'];
    }

    /**
     * Sets hide_amount
     *
     * @param bool $hide_amount hide_amount
     *
     * @return $this
     */
    public function setHideAmount($hide_amount)
    {
        $this->container['hide_amount'] = $hide_amount;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return string[]
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param string[] $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
