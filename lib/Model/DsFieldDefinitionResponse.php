<?php
/**
 * DsFieldDefinitionResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  ProfileService\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ProfileService-TEST
 *
 * Profile service test
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ProfileService\Client\Model;

use \ArrayAccess;
use \ProfileService\Client\ObjectSerializer;

/**
 * DsFieldDefinitionResponse Class Doc Comment
 *
 * @category Class
 * @package  ProfileService\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsFieldDefinitionResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FieldDefinitionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'property_id' => 'string',
'type' => 'string',
'name' => 'string',
'required' => 'bool',
'required_for_offers' => 'bool',
'possible_value' => 'map[string,string]',
'range_min' => 'string',
'range_max' => 'string',
'range_base_property_id' => 'string',
'parent_field_property_id' => 'string',
'parent_field_value' => 'string',
'readonly' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'property_id' => null,
'type' => null,
'name' => null,
'required' => null,
'required_for_offers' => null,
'possible_value' => null,
'range_min' => null,
'range_max' => null,
'range_base_property_id' => null,
'parent_field_property_id' => null,
'parent_field_value' => null,
'readonly' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_id' => 'propertyId',
'type' => 'type',
'name' => 'name',
'required' => 'required',
'required_for_offers' => 'requiredForOffers',
'possible_value' => 'possibleValue',
'range_min' => 'rangeMin',
'range_max' => 'rangeMax',
'range_base_property_id' => 'rangeBasePropertyId',
'parent_field_property_id' => 'parentFieldPropertyId',
'parent_field_value' => 'parentFieldValue',
'readonly' => 'readonly'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_id' => 'setPropertyId',
'type' => 'setType',
'name' => 'setName',
'required' => 'setRequired',
'required_for_offers' => 'setRequiredForOffers',
'possible_value' => 'setPossibleValue',
'range_min' => 'setRangeMin',
'range_max' => 'setRangeMax',
'range_base_property_id' => 'setRangeBasePropertyId',
'parent_field_property_id' => 'setParentFieldPropertyId',
'parent_field_value' => 'setParentFieldValue',
'readonly' => 'setReadonly'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_id' => 'getPropertyId',
'type' => 'getType',
'name' => 'getName',
'required' => 'getRequired',
'required_for_offers' => 'getRequiredForOffers',
'possible_value' => 'getPossibleValue',
'range_min' => 'getRangeMin',
'range_max' => 'getRangeMax',
'range_base_property_id' => 'getRangeBasePropertyId',
'parent_field_property_id' => 'getParentFieldPropertyId',
'parent_field_value' => 'getParentFieldValue',
'readonly' => 'getReadonly'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_id'] = isset($data['property_id']) ? $data['property_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['required_for_offers'] = isset($data['required_for_offers']) ? $data['required_for_offers'] : null;
        $this->container['possible_value'] = isset($data['possible_value']) ? $data['possible_value'] : null;
        $this->container['range_min'] = isset($data['range_min']) ? $data['range_min'] : null;
        $this->container['range_max'] = isset($data['range_max']) ? $data['range_max'] : null;
        $this->container['range_base_property_id'] = isset($data['range_base_property_id']) ? $data['range_base_property_id'] : null;
        $this->container['parent_field_property_id'] = isset($data['parent_field_property_id']) ? $data['parent_field_property_id'] : null;
        $this->container['parent_field_value'] = isset($data['parent_field_value']) ? $data['parent_field_value'] : null;
        $this->container['readonly'] = isset($data['readonly']) ? $data['readonly'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_id
     *
     * @return string
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param string $property_id property_id
     *
     * @return $this
     */
    public function setPropertyId($property_id)
    {
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets required_for_offers
     *
     * @return bool
     */
    public function getRequiredForOffers()
    {
        return $this->container['required_for_offers'];
    }

    /**
     * Sets required_for_offers
     *
     * @param bool $required_for_offers required_for_offers
     *
     * @return $this
     */
    public function setRequiredForOffers($required_for_offers)
    {
        $this->container['required_for_offers'] = $required_for_offers;

        return $this;
    }

    /**
     * Gets possible_value
     *
     * @return map[string,string]
     */
    public function getPossibleValue()
    {
        return $this->container['possible_value'];
    }

    /**
     * Sets possible_value
     *
     * @param map[string,string] $possible_value possible_value
     *
     * @return $this
     */
    public function setPossibleValue($possible_value)
    {
        $this->container['possible_value'] = $possible_value;

        return $this;
    }

    /**
     * Gets range_min
     *
     * @return string
     */
    public function getRangeMin()
    {
        return $this->container['range_min'];
    }

    /**
     * Sets range_min
     *
     * @param string $range_min range_min
     *
     * @return $this
     */
    public function setRangeMin($range_min)
    {
        $this->container['range_min'] = $range_min;

        return $this;
    }

    /**
     * Gets range_max
     *
     * @return string
     */
    public function getRangeMax()
    {
        return $this->container['range_max'];
    }

    /**
     * Sets range_max
     *
     * @param string $range_max range_max
     *
     * @return $this
     */
    public function setRangeMax($range_max)
    {
        $this->container['range_max'] = $range_max;

        return $this;
    }

    /**
     * Gets range_base_property_id
     *
     * @return string
     */
    public function getRangeBasePropertyId()
    {
        return $this->container['range_base_property_id'];
    }

    /**
     * Sets range_base_property_id
     *
     * @param string $range_base_property_id range_base_property_id
     *
     * @return $this
     */
    public function setRangeBasePropertyId($range_base_property_id)
    {
        $this->container['range_base_property_id'] = $range_base_property_id;

        return $this;
    }

    /**
     * Gets parent_field_property_id
     *
     * @return string
     */
    public function getParentFieldPropertyId()
    {
        return $this->container['parent_field_property_id'];
    }

    /**
     * Sets parent_field_property_id
     *
     * @param string $parent_field_property_id parent_field_property_id
     *
     * @return $this
     */
    public function setParentFieldPropertyId($parent_field_property_id)
    {
        $this->container['parent_field_property_id'] = $parent_field_property_id;

        return $this;
    }

    /**
     * Gets parent_field_value
     *
     * @return string
     */
    public function getParentFieldValue()
    {
        return $this->container['parent_field_value'];
    }

    /**
     * Sets parent_field_value
     *
     * @param string $parent_field_value parent_field_value
     *
     * @return $this
     */
    public function setParentFieldValue($parent_field_value)
    {
        $this->container['parent_field_value'] = $parent_field_value;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool $readonly readonly
     *
     * @return $this
     */
    public function setReadonly($readonly)
    {
        $this->container['readonly'] = $readonly;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
